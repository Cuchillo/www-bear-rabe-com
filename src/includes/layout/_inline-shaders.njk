<script type="x-shader/x-vertex" id="vertex-shader">
  attribute float size;
  attribute float alpha;
  varying vec3 vColor;
  varying vec2 vUv;
  
  void main() {
      vUv = uv;
      vColor = color;
      vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
      gl_PointSize = size * ( 300.0 / -mvPosition.z );
      gl_Position = projectionMatrix * mvPosition;
  }
</script>

<script type="x-shader/x-fragment" id="fragment-shader">
    uniform sampler2D t1;
    uniform vec4 resolution;
    varying vec3 vColor;
    varying vec2 vUv;

    void main() {
        /*float scaleCenter = 0.1;
        vec2 newUV = vUv;
        vec4 color = texture2D(t1,newUV);
        gl_FragColor =  vec4(color.rgb, 1.0);*/

          float scaleCenter = .5;
          float progress = 1.0;
          vec2 newUVScale = (gl_PointCoord - scaleCenter) * progress + scaleCenter;
          vec2 newUV = (newUVScale - vec2(progress))*resolution.zw + vec2(progress);
          vec4 color = texture2D(t1,newUV);

        
        gl_FragColor = vec4(color.rgb, 1.0);
    }
</script>

<script type="x-shader/x-vertex" id="vertex-shader2">
  precision highp float;

  attribute float pindex;
  attribute vec3 position;
  attribute vec3 offset;
  attribute vec2 uv;
  attribute float angle;

  uniform mat4 modelViewMatrix;
  uniform mat4 projectionMatrix;

  uniform float uTime;
  uniform float uRandom;
  uniform float uDepth;
  uniform float uSize;
  uniform vec2 uTextureSize;
  uniform sampler2D uTexture;
  uniform sampler2D uTouch;

  varying vec2 vPUv;
  varying vec2 vUv;

  float random(float n) {
    return fract(sin(n) * 43758.5453123);
  }

  void main() {
    vUv = uv;

    // particle uv
    vec2 puv = offset.xy / uTextureSize;
    vPUv = puv;

    // pixel color
    vec4 colA = texture2D(uTexture, puv);
    float grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;

    // displacement
    vec3 displaced = offset;
    // randomise
    displaced.xy += vec2(random(pindex) - 0.5, random(offset.x + pindex) - 0.5) * uRandom;
    float rndz = 1.0;
    displaced.z += rndz * (random(pindex) * 2.0 * uDepth);
    // center
    displaced.xy -= uTextureSize * 0.5;

    // touch
    float t = texture2D(uTouch, puv).r;
    displaced.z += t * 20.0 * rndz;
    displaced.x += cos(angle) * t * 20.0 * rndz;
    displaced.y += sin(angle) * t * 20.0 * rndz;

    // particle size
    float psize = 1.0;
    psize *= max(grey, 0.2);
    psize *= uSize;

    // final position
    vec4 mvPosition = modelViewMatrix * vec4(displaced, 1.0);
    mvPosition.xyz += position * psize;
    vec4 finalPosition = projectionMatrix * mvPosition;

    gl_Position = finalPosition;
  }

</script>

<script type="x-shader/x-fragment" id="fragment-shader2">
    precision highp float;

    uniform sampler2D uTexture;

    varying vec2 vPUv;
    varying vec2 vUv;

    void main() {
      vec4 color = vec4(0.0);
      vec2 uv = vUv;
      vec2 puv = vPUv;

      // pixel color
      vec4 colA = texture2D(uTexture, puv);

      // greyscale
      float grey = colA.r * 0.21 + colA.g * 0.71 + colA.b * 0.07;
      vec4 colB = vec4(grey, grey, grey, 1.0);

      // circle
      float border = 0.3;
      float radius = 0.5;
      float dist = radius - distance(uv, vec2(0.5));
      float t = smoothstep(0.0, border, dist);

      // final color
      color = colB;
      color.a = t;

      gl_FragColor = color;
    }
</script>